apply plugin: 'com.android.application'

import org.apache.tools.ant.taskdefs.condition.Os

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion
    ndkVersion rootProject.ndkVersion
    namespace = 'org.puredata.android.test'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion 33
        versionCode 1
        versionName '1.0'

        // Uncomment the following 'ndk' section to include only 32-bit CPU architectures in the APK
        // ndk {
        //    abiFilters 'x86', 'armeabi-v7a'
        // }
    }

    packagingOptions {
        jniLibs {
            // since externals are loaded at native code level, they need to be copied to the actual
            // filesystem, instead of staying in the apk; so we must set useLegacyPackaging:
            useLegacyPackaging true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        // Extract native libs from prefab, to be able to access the headers and to link to the libs
        prefab true
        viewBinding true
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of the default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    defaultConfig {
        externalNativeBuild {
            ndkBuild {
                arguments "NDK_DEBUG=1", "-j" + Runtime.runtime.availableProcessors()
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path "jni/Android.mk"
        }
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:' + rootProject.androidxLegacySupportVersion

    // in a real project, use something like:
    implementation 'io.github.libpd.android:pd-core:' + rootProject.pdCoreVersion

    /*implementation files("../PdCore/build/outputs/aar/pd-core.aar") {
        builtBy ':PdCore:build'
    }*/

    //implementation project( path : ':PdCore', configuration : 'pdcore_aar' )
}

